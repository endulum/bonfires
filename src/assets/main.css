@font-face {
  font-family: "Roboto Condensed";
  src: url(./fonts/RobotoCondensed-VariableFont_wght.ttf);
}

@font-face {
  font-family: "Roboto Condensed Italic";
  src: url(./fonts/RobotoCondensed-Italic-VariableFont_wght.ttf);
}

:root {
  --fontstack: Helvetica, Arial, sans-serif;
  --radius: 3px;
  --white: #faf4ed;
}

[data-theme] {
  --rt-color-white: var(--base);
  --rt-color-dark: var(--text);
}

[data-theme="light"] {
  --base: #faf4ed;
  --surface: #fffaf3;
  --overlay: #f2e9e1;
  --border: oklch(from var(--overlay) calc(l - 0.025) c h);
  --text: #575279;
  --warning: #b4637a;
  --success: #56949f;
  --info: #56949f;
  --neutral: #907aa9;
  --lumi: -0.025;
  --alert-txt-lumi: -0.125;
  --rt-opacity: 1;
}

[data-theme="dark"] {
  --base: #191724;
  --surface: #1f1d2e;
  --overlay: #26233a;
  --border: oklch(from var(--overlay) calc(l + 0.05) c h);
  --text: #e0def4;
  --warning: #eb6f92;
  --success: #9ccfd8;
  --info: #9ccfd8;
  --neutral: #c4a7e7;
  --lumi: 0.05;
  --alert-txt-lumi: 0.05;
  --rt-opacity: 1;
}

* {
  transition: background-color 0.25s ease, border-color 0.25s ease;
}

body {
  font-family: "Roboto Condensed", var(--fontstack);
  font-weight: 400;
  color: var(--text);
  background-color: var(--base);
}

main {
  background-color: var(--surface);
  border-left: 1px solid var(--border);
  border-right: 1px solid var(--border);
}

i {
  font-style: normal !important;
  font-family: "Roboto Condensed Italic", var(--fontstack);
}

[role="tooltip"] {
  box-shadow: rgba(0, 0, 0, 0.25) 0px 2px 4px;
}

/**** coloring ****/

.neutral {
  --color: var(--neutral);
}
.warning {
  --color: var(--warning);
}
.success {
  --color: var(--success);
}
.info {
  --color: var(--info);
}

/**** reusable components ****/

/* basic elements */

small {
  line-height: 0.75rem;
}

a {
  font-weight: bold;
  color: var(--neutral);
}

textarea {
  font-family: monospace;
}

hr {
  height: 1px;
  width: 100%;
  border: none;
  border-top: 1px solid var(--border);
}

svg {
  &.small {
    width: 1.25rem;
    height: 1.25rem;
    min-width: 1.25rem;
    min-height: 1.25rem;
    vertical-align: top;
  }
}

.list {
  list-style: square;
  li {
    margin-left: 1rem;
    margin-bottom: 0.25rem;
  }
}

/* buttons */

.button {
  font-size: 1rem;
  line-height: 1.25rem;
  font-weight: bold;
  text-decoration: none;
  border-radius: var(--radius);
  padding: 0.5rem 1rem;
  transition: color 0.25s ease, background-color 0.25s ease, border 0.25s ease;
  justify-content: center;

  span,
  small {
    min-width: max-content;
    white-space: nowrap;
    flex-shrink: 0;
  }

  svg {
    width: 1.25rem;
    min-width: 1.25rem;
    height: 1.25rem;
    transition: color 0.25s ease;
  }

  &[disabled] {
    opacity: 0.5;
  }

  &:not([disabled]):hover {
    cursor: pointer;
  }

  &:has(svg) {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5rem;
  }

  &:not(:has(span)) {
    padding: 0.5rem;
  }

  &:has(small) {
    gap: 0.25rem;
    line-height: 0.5rem;
    svg {
      width: 1rem;
      height: 1rem;
    }
  }

  &.solid {
    color: var(--white);
    background-color: oklch(from var(--color) calc(l - 0.125) c h / 1);
    &:not([disabled]):hover {
      background-color: oklch(from var(--color) calc(l - 0.05) c h / 1);
    }
  }

  &.outlined {
    color: var(--text);
    background-color: transparent;
    border: 1px solid oklch(from var(--color) l c h / 0.5);
    svg {
      color: oklch(from var(--color) l c h / 0.5);
    }
    &:not([disabled]):hover {
      border: 1px solid var(--color);
      svg {
        color: var(--color);
      }
    }
  }

  &.plain {
    color: var(--text);
    background-color: transparent;
    svg {
      color: var(--color);
    }
    &:not([disabled]):hover {
      background-color: oklch(from var(--overlay) calc(l + var(--lumi)) c h);
      svg {
        color: var(--color);
      }
    }
  }

  &.circle {
    border-radius: 100%;
    width: 2.25rem;
    min-width: 2.25rem;
    height: 2.25rem;
    min-height: 2.25rem;
  }
}

/* alerts */

.alert {
  padding: 0.5rem 0.75rem;
  border-radius: var(--radius);
  background-color: oklch(from var(--color) calc(l + var(--lumi)) c h / 0.125);
  color: oklch(from var(--color) calc(l + var(--alert-txt-lumi)) c h);
  a {
    color: oklch(from var(--color) calc(l + var(--alert-txt-lumi)) c h);
  }
  p {
    flex-grow: 1;
  }
  svg {
    flex-shrink: 0;
  }
}

/* loading spacers */

.spacer {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  width: 100%;
  height: 100%;
  padding: 1rem 0;
  svg {
    width: 2rem;
    height: 2rem;
  }
  p {
    text-align: center;
  }
}

#root > .spacer {
  background-color: var(--surface);
  color: var(--fg);
  height: 100vh;
  svg {
    color: var(--neutral);
  }
}

.spin {
  animation: spin 1s infinite linear;
}

@keyframes spin {
  from {
    transform: rotate(360deg);
  }
  to {
    transform: rotate(0deg);
  }
}

.blink {
  animation: blink 2s infinite linear;
}

@keyframes blink {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

/* inputs and forms */

input:not([type="checkbox"]),
select,
textarea {
  color: var(--text);
  width: 100%;
  padding: 0.3755rem 0.625rem;
  border: 1px solid var(--border);
  border-radius: var(--radius);
  background-color: transparent;
  &:focus,
  &:focus-visible {
    outline: 2px solid var(--neutral);
    outline-offset: -1px;
  }
  &::placeholder {
    color: oklch(from var(--border) calc(l + (var(--lumi) * 7)) c h);
  }
}

label {
  span {
    font-weight: bold;
    min-width: max-content;
    flex-shrink: 0;
  }
}

.form {
  button[type="submit"] {
    align-self: end;
  }
}

.form-label {
  &:has(.form-error) {
    input,
    select,
    textarea {
      border: 1px solid var(--warning);
    }
  }
}

.visually-hidden {
  border: 0;
  padding: 0;
  margin: 0;
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(
    1px 1px 1px 1px
  ); /* IE6, IE7 - a 0 height clip, off to the bottom right of the visible 1px box */
  clip: rect(
    1px,
    1px,
    1px,
    1px
  ); /*maybe deprecated but we need to support legacy browsers */
  clip-path: inset(
    50%
  ); /*modern browsers, clip-path works inwards from each corner*/
  white-space: nowrap; /* added line to stop words getting smushed together (as they go onto seperate lines and some screen readers do not understand line feeds as a space */
}

/* https://stackoverflow.com/questions/64167749/what-to-do-if-i-dont-have-a-label-element-to-go-with-an-input-element */

/* input checklists */

.form-input-checklist {
  list-style: none;
  font-size: 0.875rem;
  li {
    padding: 0.125rem 0;
    line-height: 1rem;
    &.good svg {
      color: var(--success);
    }
    &.missing svg {
      color: var(--warning);
    }
  }
}

/* navtabs */

.navtabs {
  border-bottom: 1px solid var(--border);
  width: 100%;
  button {
    color: oklch(from var(--text) l c h / 0.75);
    background-color: transparent;
    padding: 1.25rem 0.5rem;
    margin-bottom: -1px;
    border-bottom: 3px solid transparent;
    &[aria-selected="true"] {
      font-weight: bold;
      color: var(--neutral);
      border-bottom: 3px solid var(--neutral);
    }
    &:hover:not([aria-selected="true"]) {
      cursor: pointer;
      border-bottom: 3px solid var(--border);
    }
  }
}

/* flyouts */

.flyout {
  width: max-content;
  height: max-content;
  position: relative;
  .menu {
    z-index: 1;
    border: 1px solid var(--border);
    border-radius: var(--radius);
    background-color: var(--overlay);
    position: absolute;
    padding: 0.5rem;
    button,
    a[type="button"] {
      justify-content: start;
      width: 100%;
      text-align: left;
      min-width: max-content;
      &:has(svg) {
        padding-left: 0.5rem;
      }
    }
  }
}

/* react-modal modals */

.ReactModal__Overlay {
  opacity: 0;
  transition: opacity 0.25s ease-in-out;
  /* padding: 1rem; */
}

.ReactModal__Overlay--after-open {
  opacity: 1;
}

.ReactModal__Overlay--before-close {
  opacity: 0;
}

/* avatars */

.avatar {
  border-radius: 100%;
  width: var(--av-size);
  height: var(--av-size);
  min-width: var(--av-size);
  min-height: var(--av-size);
  &.small,
  &.channel-view {
    --av-size: 30px;
  }
  &.med {
    --av-size: 50px;
  }
  &.large,
  &.index-self {
    --av-size: 75px;
  }
}

@media screen and (max-width: 500px) {
  .avatar {
    &.med {
      --av-size: 40px;
    }
    &.large {
      --av-size: 50px;
    }
  }
}

/* etc */

.faded {
  color: oklch(from var(--border) calc(l + (var(--lumi) * 7)) c h);
}

/**** unqiue components ****/

.auth-main {
  background-color: var(--surface);
  border-radius: var(--radius);
  border: 1px double var(--border);
  padding: 1.25rem;
  width: 100%;
  max-width: 400px;
}

.me {
  h2 {
    font-weight: normal;
    line-height: 1.25rem;
  }
}

.me-avatar {
  position: relative;
  background-color: var(--overlay);
  border-radius: 100%;
  button {
    background-color: var(--overlay) !important;
    color: var(--text) !important;
    position: absolute;
    bottom: 0rem;
    left: 0rem;
  }
}

.channels {
  flex-grow: 1;
  overflow-y: auto;
}

.channel {
  font-weight: normal;
  background-color: transparent;
  border-radius: 999px;
  height: calc(1rem + 75px);
  &:hover {
    background-color: var(--overlay);
    .channel-user,
    .channel-user-badge {
      border: 3px solid var(--overlay);
    }
  }
}

.channel-user {
  + .channel-user,
  + .channel-user-badge {
    margin-left: -0.5rem;
  }
}

.channel-user-badge {
  background-color: oklch(from var(--border) calc(l + var(--lumi)) c h);
  line-height: 25px;
  padding: 0 0.5rem;
  min-width: max-content;
  border-radius: 99px;
  &:first-child {
    margin-left: -0.5rem;
  }
}

.channel-user,
.channel-user-badge {
  border: 3px solid var(--surface);
  height: 30px;
  min-height: 30px;
}

button:has(.channelview-avatar) {
  background-color: transparent;
  transition: none;
  cursor: pointer;
  padding: 0.25rem;
  margin-right: 0.25rem;
}

/* date dividers for messages */

.messages-beginner {
  svg {
    width: 2.5rem;
    height: 2.5rem;
  }
  h3 {
    font-weight: normal;
  }
}

.event-item {
  padding: 0.5rem 0;
  &:last-child {
    padding-bottom: 1rem;
  }
  > svg {
    color: var(--neutral);
  }
}

/* messages */

.message {
  padding: 0.5rem;
  border-radius: var(--radius);
  width: 100%;
  position: relative;
  &:hover {
    background-color: oklch(from var(--base) l c h / 0.5);
  }
}

.message-dropdown {
  position: absolute;
  right: 1rem;
  .flyout > button {
    padding: 0.25rem;
  }
}

.modal-messages {
  .event-item {
    padding: 0.5rem;
    border-radius: var(--radius);
    width: 100%;
    background-color: oklch(from var(--base) l c h / 0.5);
  }
}

/* active users */

.activeroll {
  padding: 0.5rem 0;
}

.activeroll-user {
  background-color: var(--overlay);
  padding: 0.25rem;
  border-radius: 99px;
  &:has(small) {
    padding-right: 0.5rem;
  }
}

/* media queries */

@media screen and (max-width: 500px) {
  #root {
    padding: 0;
  }
  main {
    border: none;
  }
  body,
  .button {
    font-size: 0.875rem;
    line-height: 1.25rem;
  }
  .channel {
    height: calc(1rem + 50px);
  }
}
